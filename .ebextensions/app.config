option_settings:
  - namespace: aws:elasticbeanstalk:application:environment
    option_name: COMPOSER_HOME
    value: /root

  - option_name: APP_ENV
    value: placeholder
  - option_name: APP_KEY
    value: placeholder

  - option_name: DB_NAME
    value: placeholder
  - option_name: DB_USER
    value: placeholder
  - option_name: DB_PASSWORD
    value: placeholder
  - option_name: DB_PREFIX
    value: placeholder
  - option_name: DB_HOST
    value: placeholder

  - option_name: WP_DEBUG
    value: placeholder
  - option_name: WP_LOCAL_DEV
    value: placeholder
  - option_name: WP_FORCE_SSL
    value: placeholder

  - option_name: SITE_URL
    value: placeholder

  - option_name: VARNISH_PATH
    value: placeholder
  - option_name: VARNISH_ENABLED
    value: placeholder
  - option_name: VARNISH_TOKEN
    value: placeholder
  - option_name: VARNISH_AWS
    value: placeholder
  - option_name: VARNISH_AWS_LB
    value: placeholder
  - option_name: VARNISH_AWS_REGION
    value: placeholder

  - option_name: MAILGUN_KEY
    value: placeholder
  - option_name: MAILGUN_DOMAIN
    value: placeholder
  - option_name: MAILGUN_FROM
    value: placeholder

  - option_name: SYNC
    value: placeholder

  - option_name: S3_KEY
    value: placeholder
  - option_name: S3_SECRET
    value: placeholder
  - option_name: S3_REGION
    value: placeholder
  - option_name: S3_BUCKET
    value: placeholder
  - option_name: S3_URL
    value: placeholder

  - option_name: CDN_ENABLED
    value: placeholder
  - option_name: CDN_URL
    value: placeholder

  - option_name: SCHEDULER_ROUTE
    value: placeholder
  - option_name: SCHEDULER_TOKEN
    value: placeholder

packages:
  yum:
    varnish: []

files:
  "/etc/varnish/default.vcl":
    owner: root
    group: root
    content: |
      backend default {
          .host = "127.0.0.1";
          .port = "8080";
      }

      acl elb {
        "172.22.0.0"/20;
        "172.22.16.0"/20;
        "172.22.32.0"/20;
      }


      sub vcl_recv {
        if (req.request == "PURGE") {

          set req.http.xff = regsub(req.http.X-Forwarded-For, "^[^,]+.?.?(.*)$", "\1");

          if(client.ip ~ elb) {
            if (req.http.X-Purge-Token == "xxxx") {
              return (lookup);
            }
          }

           error 405 "Not allowed.";
        }
        if ( (req.http.host ~ "^(?i)domain.com" || req.http.host ~ "^(?i)www.domain.com") && req.http.X-Forwarded-Proto !~ "(?i)https") {
          set req.http.x-Redir-Url = "https://domain.com" + req.url;
          error 750 req.http.x-Redir-Url;
        }
        if (!(req.url ~ "(preview=true|wp-login|wp-admin|wordpress)")) {
          unset req.http.cookie;
        }
      }

      sub vcl_fetch {
        if (beresp.ttl == 120s) {
          set beresp.ttl = 24h;
        }

        if (!(req.url ~ "(preview=true|wp-login|wp-admin|wordpress)")) {
          unset beresp.http.set-cookie;
        }
      }

      sub vcl_hit {
        if (req.request == "PURGE") {
          if(req.http.X-Purge-Method == "regex") {
            ban("req.url ~ " + req.url + " && req.http.host ~ " + req.http.host);
          }
          if(req.http.X-Purge-Method == "direct") {
            ban("req.url ~ " + req.http.X-Purge-Url + " && req.http.host ~ " + req.http.X-Purge-Host);
          }
          purge;
          error 200 "Purged.";
        }
      }

      sub vcl_miss {
        if (req.request == "PURGE") {
          if(req.http.X-Purge-Method == "regex") {
            ban("req.url ~ " + req.url + " && req.http.host ~ " + req.http.host);
          }
          if(req.http.X-Purge-Method == "direct") {
            ban("req.url ~ " + req.http.X-Purge-Url + " && req.http.host ~ " + req.http.X-Purge-Host);
          }
          purge;
          error 200 "Purged.";
        }
      }

      sub vcl_error {
          if (obj.status == 750) {
              set obj.http.Location = obj.response;
              set obj.status = 302;
              return (deliver);
          }
      }



commands:
  001_update_composer:
    command: export COMPOSER_HOME=/root && /usr/bin/composer.phar self-update
  010_httpd.conf:
    command: "sed -i 's/Listen 8080/Listen 80/g' /etc/httpd/conf/httpd.conf"
  011_httpd.conf:
    command: "sed -i 's/Listen 80/Listen 8080/g' /etc/httpd/conf/httpd.conf"
  040_varnish:
    command: "sed -i 's/VARNISH_LISTEN_PORT=6081/VARNISH_LISTEN_PORT=80/g' /etc/sysconfig/varnish"
  041_varnish:
    command: "sed -i 's/VARNISH_ADMIN_LISTEN_PORT=6082/VARNISH_ADMIN_LISTEN_PORT=2000/g' /etc/sysconfig/varnish"

container_commands:
   "1-storage-permissions":
      command: "mkdir -p public/content/uploads && chmod -R 777 public/content/uploads"
   "2-install-dependencies":
      command: "/usr/bin/composer.phar install"

services:
  sysvinit:
    varnish:
      enabled: true
      ensureRunning: true

